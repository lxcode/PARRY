BEGIN

% MASTER LIST OF GLOBAL VARIABLES  %

%			*** GLOBAL VARIABLES***

!ANAPHLIST	is the current list of anaphora dotted-pairs.
!ANAPHLISTOLD	is the previous list of anaphora dotted-pairs.
!ALLANAPHS	is a list of lists - ((who they he)(he who)(they who)....)
!CLIST		is a pointer to the first element of the conversation list.
!CLAST		is a pointer to the last element of the conversation list.
!LAST_ANDTHEN	is either IN or OUT as the last ANDTHEN processed
!LASTIN		points to atom under which is stored the last semantic unit
		inputed by the doctor.
!LASTOUT	points to the atom under which is stored the last semantic
		unit outputed by Parry.

!ERROR		contains a list of errors made
!EXHAUST	is true if a set of responses is exhausted and the exhaust responses are to be used
		  it is set by SELECT_SENTENCE  and used at the end of REACT2
!OUTPUT		is the output of parry, to be sent whereever
!LAST_OUTPUT	is the -name of the last output

INPUTQUES	is a list of dotted pairs from the pattern matcher to the memory
			each pair is (canonical 5-letter atom . input word)

         %


SPECIAL ?!ANAPHLIST,?!ANAPHLISTOLD,?!CLIST,?!CLAST,?!ALLANAPHS,
	?!LASTIN,?!LASTOUT,?!LAST_ANDTHEN,
	?!OUTPUT,?!LAST_OUTPUT, ?!EXHAUST, ?!ERROR, WDFLAG, REACTTO, ERRNAME,
	STYPE, STOPIC, TRACE_MEM, ENDE,

	INPUTQUES,SSENT,DO_SPELL,NEXT_CHAR,MISSPELL,
	INPUTSSENT, DOCNAME, DOC_NAME_FLAG, EXHAUSTNO, SILENCENO, SWEARNO,

	CHANSAVE, INCHAN, SAVE_FILE, SAVE_DUMP, EOF, FILE1, FILE2, DIACHARNO,
	INPUTFILE, PMINPUT, PM2INPUT, BUG,

	INPUTNO, REPEATNO, SPECFNNO, MISCNO, NEWTOPICNO,
	OLDTOPIC, OLDTOPICS, HLIST;

SPECIAL EXPERIMENT;
%  INITF, FLARESENT, DELNSENT  %

NEW     ?!ANAPHLIST,?!ANAPHLISTOLD,?!CLIST,?!CLAST,?!ALLANAPHS,
	?!LASTIN,?!LASTOUT,?!LAST_ANDTHEN,
	?!OUTPUT,?!LAST_OUTPUT, ?!EXHAUST, ?!ERROR, WDFLAG, REACTTO, ERRNAME,
	STYPE, STOPIC, TRACE_MEM, ENDE,

	INPUTQUES,SSENT,DO_SPELL,NEXT_CHAR,MISSPELL,
	INPUTSSENT, DOCNAME, DOC_NAME_FLAG, EXHAUSTNO, SILENCENO, SWEARNO,

	CHANSAVE, INCHAN, SAVE_FILE, EOF, FILE1, FILE2, DIACHARNO,
	INPUTFILE, PMINPUT, PM2INPUT, BUG,

	INPUTNO, REPEATNO, SPECFNNO, MISCNO, NEWTOPICNO,
	OLDTOPIC, OLDTOPICS, HLIST;

 
DEFINE CAR PREFIX , CDR PREFIX , PROG2  3 3, SET0   5 5, CONS  86 83,
 THEN , ELSE \, STOREBYTE  5 5, CARN PREFIX, CHOOSE PREFIX, NUMED PREFIX, CHRVAL PREFIX;


EXPR INITF();	% INITIALIZES GLOBAL VARIABLES %

	BEGIN  EXHAUSTNOSILENCENOSWEARNO0;

	?!ALLANAPHS '( (WHO   % THEY HE SHE WE %  )
			(THEY  HE SHE WE)
			(HE )  (SHE )  (WE )
			(THERE WHERE)  (HERE THERE WHERE)  (WHERE)
			(THEN WHEN)  (WHEN HOW_LONG)	(HOW_LONG)
			(IT) (WHAT) (YOU_DO) (THEY_DO) (HOW_MUCH) (HOW_KNOW)
			(GO_ON) (ELAB) (WHY) (HOW) (YES) (NO)  ) ;
	END;

EXPR FLARESENT();
	% FLARESENT IS A SEMANTIC FUNCTION CALLED BY A FLARE INPUT %
	% IT CALLS THE OLD PARRY ROUTINES FOR FLARE TOPICS %

	BEGIN  	  % DEACTIVATE NEW FLARE WORDS AND COMPUTE FJUMP  %
	FLAREREF(INPUTQUES); 	RETURN NIL;
	END;

EXPR DELNSENT();
	% FLARESENT IS A SEMANTIC FUNCTION CALLED BY A FLARE INPUT %
	% IT CALLS THE OLD PARRY ROUTINES FOR FLARE TOPICS %

	BEGIN NEW A,B;
	ADELCHECK(INPUTQUES); 	BDELREF(A);
	RETURN B;
	END;

% *** RAISE, PRINTVARS, WPRINTVARS %
EXPR RAISE ();
	 BEGIN
	  IF HJUMP THEN  BEGIN
		IF WEAK THEN HJUMP0.5 * HJUMP;
		HURT  (HURT + HJUMP * (20 - HURT));
		MISTRUST  (MISTRUST + (0.5 * HJUMP) * (20 - MISTRUST));
		MISTRUST0MISTRUST0 + 0.1 * HJUMP * (20 - MISTRUST0);
		HURT0MAX(HURT/2, HURT0);
			 % SET HIGHER FLOOR ON FEAR AND ANGER DUE TO HURT %
		FEAR0MAX(FEAR0, HURT0/2); FEARMAX(FEAR,FEAR0);
		ANGER0MAX(ANGER0, HURT0/2); ANGERMAX(ANGER,ANGER0);
	  END;
	  IF FJUMP THEN  BEGIN
		FJUMPFJUMP + HURT / 50;	% MAKES FEAR VOLATILE ON HIGH HURT %
		IF WEAK THEN FJUMP0.3 * FJUMP;
		FEAR  (FEAR + FJUMP * (20 - FEAR));
		MISTRUST  (MISTRUST + (0.5 * FJUMP) * (20 - MISTRUST));
		MISTRUST0MISTRUST0 + 0.1 * FJUMP * (20 - MISTRUST0);
	  END;
	  IF AJUMP THEN  BEGIN
		AJUMPAJUMP + HURT / 50;	% MAKES ANGER VOLATILE ON HIGH HURT %
		IF WEAK THEN AJUMP0.7 * AJUMP;
		ANGER  (ANGER + AJUMP * (20 - ANGER));
		MISTRUST  (MISTRUST + (0.5 * AJUMP) * (20 - MISTRUST));
		MISTRUST0MISTRUST0 + 0.1 * AJUMP * (20 - MISTRUST0);
	  END;
	 END ;


EXPR NUMED(N);  % 0.00  N  99.99, RETURNS STRING "12.34" %
	NEDIT( FIX( N*100+0.5));
% SKEYWD, KEYWD, SILENCER, EXHAUSTER, SWEARER, ENDROUTINE  %

% SKEYWD CHECKS FOR FLARE AND DELN WORDS USING OLD PARRY ROUTINES %
% SKEYWD AND KEYWD ARE ONLY USED WHEN NOTHING IS RECOGNIZED BY THE PATTERN MATCHER %

EXPR SKEYWD (TYPE, SENT);

	BEGIN  NEW FOUND,R;
	% CHECK FOR DELN OR FLARE WDS IN INPUT %
	IF DELFLAG  RDELCHECK (SENT) THEN
		IF RDELREF (R) THEN FOUNDR ELSE FOUND DELSTMT ();
	IF FOUND  (FLARE'INIT)  R FLAREREF (SENT) THEN FOUND FLSTMT (R);
	IF FOUND THEN FOUNDKEYWD(SENT, SETLIST);
	IF FOUND THEN FOUNDSPECCONCEPT(NIL);
	RETURN (FOUND);
	END;

% KEYWD CHECKS FOR KEY WORDS FROM SPECIAL TOPICS %
% KEYWD IS ONLY USED IF THE PATTERN MATCHER FOUND NOTHING, AND THE NEW KEYWORD
	IS ON THE SAME TOPIC AS THE PREVIOUS INPUT %

EXPR KEYWD(INP, SETLIST);

	BEGIN NEW SET, RESULT,A;
	FOR SET IN GET('SETLIST, 'SETS)  DO  BEGIN
		FOR NEW WORD IN GET(SET, 'WORDS) DO 
		   IF ASSOC(WORD, INP)  THEN RESULTSET
		UNTIL RESULT;
	END  UNTIL RESULT;
	IF RESULT THEN RETURN NIL; SETRESULT;
	IF RESULTGET(RESULT, 'STORY) THEN RETURN NIL;
	A IF STOPIC='ANAPH THEN OLDTOPIC ELSE STOPIC;
	IF SYNNYM(A)=SYNNYM(SET) THEN RETURN(  RESULT);
	% ONLY RETURN ANSWER IF TOPIC SAME AS PREVIOUS TOPIC %
	END;

EXPR SILENCER();	% SEMANTIC FUNCTION CALLED BY SILENCE INPUT %

	BEGIN  SILENCENOSILENCENO+1; IF SILENCENO=11 THEN ENDET;
	AJUMP0.1;	RETURN NIL;
	END;

EXPR EXHAUSTER();	% SEMANTIC FUNCTION CALLED BY EXHAUST OUTPUT SELECTION %

	BEGIN  EXHAUSTNOEXHAUSTNO+1; AJUMP0.15;
	IF EXHAUSTNO=9 THEN ENDET ALSO RETURN CHOOSE 'MADEXIT;
	END;

EXPR SWEARER();		% SEMANTIC FUNCTION CALLED BY SWEAR INPUT %

	BEGIN  SWEARNOSWEARNO+1;  AJUMP0.3;
	IF SWEARNO=5  THEN ENDET ALSO RETURN CHOOSE 'MADEXIT;
	END;

EXPR ENDROUTINE();	% SEMANTIC FUNCTION CALLED BY EXIT OUTPUT SELECTION %

	BEGIN	ENDET;
	IF FEAR18.4  (DELFLAG  FLARE'INIT) THEN AJUMP0.1 
	  ALSO RETURN CHOOSE 'BYEOFF;
	RETURN CHOOSE 'BYE;
	END;
% Q, CANONA, MEMFIND, INITPARAMS, STRINGATE, ANALYZE	%

EXPR Q(L);	% RETURNS T IF THE INPUT L IS A QUESTION %

	IF L THEN 'D ELSE 	IF CAR LAST L = 'QM THEN 'Q ELSE
	IF (CAR L) MEMBER '(IS ARE WAS WERE AM DID DOES DO HAVE HAS HAD
		WHO WHOM WHAT WHEN WHERE HOW WHY CAN COULD WOULD SHOULD WILL MAY )
	THEN 'Q ELSE 'D ;

% CANONIZE CANONIZES L USING THE PATTERN MATCHER %
	% USED FOR RUNNING THE OUTPUT BACK THRU AN INPUT SCAN FOR DELUSIONAL WORDS %
EXPR CANONA(L);
	BEGIN NEW A,B,C;  AINPUTQUES; CDO_SPELL;  DO_SPELLNIL;
	BCANONIZE(IF L  ATOM L THEN L ELSE L);  BINPUTQUES;
	DO_SPELLC; INPUTQUESA;  RETURN B;
	END;

EXPR MEMFIND(STRUC);	STRUC;

EXPR INITPARAMS();	% INITIALIZED PROGRAM PARAMETERS %

	BEGIN NEW A;  SPECIAL NOTSAVED; EOFPERCENT;
	TERPRI NIL;
	PRINTSTR ("END INPUT PARAMETERS WITH CARRIAGE RETURN OR ALTMODE");
	TERPRI NIL;
	PRINTSTR ("PRINT NON VERBAL FEATURE? [Y,N]");
	AREAD();
	IF A=NOTSAVED OR A='FILE THEN SUPPRESSNIL 
	  ALSO ANGERANGER0FEARFEAR0MISTRUSTMISTRUST0HURTHURT00
	  ALSO TRACEVT ALSO SAVE_FILENIL ALSO INITFN NIL 
	  ALSO ( PRINTSTR("WINDOWS? ") ANDDO WINDOWS(READ()='Y) )
	  ALSO (IF A='FILE THEN PRINTSTR("FILE=") ALSO AREAD() 
		  ALSO INPUTFILEA ALSO BILLP() )
	  ALSO TERPRI NIL
	  ALSO RETURN NIL;
	EXPERIMENTA;

	ACHRVAL A;
	SUPPRESS  ( (A=CHRVAL 'Y) OR (A=CHRVAL 'y) ) ;
	TERPRI NIL;
	PRINTSTR ("VERSION [WEAK, MILD, STRONG]");
	A CHRVAL READ();
	IF (A=CHRVAL 'W) OR (A=CHRVAL 'w)
	   THEN WEAKT ALSO VERSION'WEAK
	ELSE  ANGERANGER0FEARFEAR0MISTRUSTMISTRUST0HURTHURT0
	  (IF (A=CHRVAL 'S) OR (A=CHRVAL 's) THEN VERSION'STRONG ALSO 5
		ELSE VERSION'MILD ALSO 0);

	IF DDJOB()  SUMEX
	  THEN PRINTSTR TERPRI ("DISPLAY WINDOWS? [Y,N] ") 
	  ALSO ACHRVAL READ() 
	  ALSO WINDOWS ( (A=CHRVAL 'Y) OR (A=CHRVAL 'y) );

	IF TRACEVFLAG  WINDOWS 
	  THEN PRINTSTR TERPRI ("TRACE INTERNAL PROCESSES? [Y,N] ")
	  ALSO ACHRVAL READ()
	  ALSO (IF (A=CHRVAL 'Y) OR (A=CHRVAL 'y) THEN TRACEV'ALL)
	  ALSO (IF TRACEV THEN PRINTSTR ("APPROX 15 LINES OF OUTPUT PER I/O PAIR"));

	IF TRACEV  WINDOWS THEN  PRINTSTR TERPRI ("TRACE EMOTION VARIABLES? [Y,N]")
	  ALSO ACHRVAL READ() 
	  ALSO (IF (A=CHRVAL 'Y) OR (A=CHRVAL 'y) THEN TRACEVT);
 
	IF SUMEX  PTYJOB THEN BEGIN
	PRINTSTR TERPRI "DO YOU WANT THE CORE DUMPED? [Y,N]";  % FOR SAVING CORE IF SYSTEM CRASHES %
	IF ( READ () EQ 'Y ) THEN BEGIN
	  PRINTSTR TERPRI "NAME FOR THE DUMP FILE?[6 CHARS]";
	  AREAD();  SAVE_DUMPA;  AEXPLODE(A);
	  IF A='H  A='A  A='R THEN NIL ELSE SAVE_DUMPNIL;
	 END;  END ELSE SAVE_DUMPNIL;
	SAVE_FILET;
	INITPARAMS2();
	END;

EXPR INITPARAMS2();
	BEGIN
	PRINTSTR " 
END INPUT WITH A PERIOD OR QUESTION MARK, 
   FOLLOWED BY CARRIAGE RETURN. 
TO INDICATE SILENCE, TYPE   . 
   WHEN FINISHED, TYPE   BYE. 
USE PERIODS ONLY AT THE ENDS OF SENTENCES,
   NOT IN ABBREVIATIONS.
";
	IF PTYJOB() THEN PRINTSTR "
IF YOU ARE NOT AT STANFORD, YOUR BACKSPACE OR RUBOUT KEY
   PROBABLY DOESNT WORK CORRECTLY.
";
	END;

EXPR STRINGATE(L);	% RETURNS A STRING WITH THE QUOTE MARKS, FASTER THAN STR %

	BEGIN NEW A,B; AEXPLODEC(L);
	ACDR STRINGATE2(A);
	A'?" CONS A ; 	BREADLIST(A);
	RETURN B;
	END;

EXPR STRINGATE2(A);

	IF NULL A THEN NIL
	ELSE IF NULL CDR A THEN  < '?" >
	ELSE CAR A CONS STRINGATE2(CDR A);

EXPR ANALYZE(FLAG);	% FOR ANALYZING TIME AND GARBAGE COLLECTION %

	BEGIN SPECIAL OLDTIME, OLDSPEAK, ANALFLAG; NEW A,B;
	IF FLAG THEN OLDTIMETIME()  ALSO OLDSPEAKSPEAK()  ALSO ANALFLAGNIL  ALSO RETURN NIL;
	IF ANALFLAG THEN RETURN NIL;
	ATIME();	B CAR DIVIDE( 10 * (A-OLDTIME) , 166 );
	PRINC(B); PRINTSTR( " TICS");  OLDTIMEA;
	ASPEAK();	BA-OLDSPEAK;
	PRINC(B); PRINTSTR( " CONSES"); OLDSPEAKA;
	END; 

%	GET_DATE, GET_TIME, GETDOCNAME	%

EXPR DATE(N);

	BEGIN NEW A,B,C,YR,MO,DATE,DAY;
	ADATEUU();
	TEN();	AA+N;  % -1 IS YESTERDAY, 0 TODAY, +1 TOMORROW %
	BDIVIDE(A, 31);	DATEB+1;
	BDIVIDE(B, 12);	MOB+1;
	YRB+1964;

	C'((31 .JANUARY)(28 .FEBRUARY)(31 .MARCH)(30 .APRIL)(31 .MAY)(30 .JUNE)
	 (31 .JULY)(31 .AUGUST)(30 .SEPTEMBER)(31 .OCTOBER)(30 .NOVEMBER)(31 .DECEMBER));
	A0;
	FOR NEW I1 TO MO-1 BY 1 DO AA+C[I];
	FOR NEW I1973 TO YR BY 1 DO AA+365;
	AA+DATE-1;
	ADIVIDE(A,7)+1;	% MINUS 2 AND PLUS 1 TO ORIENT FOR 1973 AND BEYOND%
			% PREVIOUS LINE SHOULD BE FIXED ON FEB 29, 1976 %
	B'(SUNDAY MONDAY TUESDAY WEDNESDAY THURSDAY FRIDAY SATURDAY);
	DAYB[A];
	MOC[MO];
	RETURN < YR, MO, DATE, DAY > ;
	END;

EXPR GETDOCNAME();

	BEGIN NEW A,B,C,DOC,TEST,NAME;
	ASSENT;	
	ADELETE('PD, A); 	ADELETE('COMMA, A);
	BA;
	DO  IF B='MY  B='NAME  B='IS THEN CB  UNTIL C OR BB;
	BA;
	IF C THEN
	  DO IF B='I  B='AM  (B='DR  B='DOCTOR) THEN CB
		ALSO DOCT	UNTIL C OR BB;
	BA;
	IF C THEN
	  DO IF (B='I?'M  B='IM)  (B='DR  B='DOCTOR) THEN CB
		ALSO DOCT	UNTIL C OR BB;
	IF C='DR  C='DOCTOR THEN DOCT ALSO CC;
	IF C THEN RETURN NIL;
	NAME < C > ;
	IF C THEN TESTC 
		ALSO IF CANONA(<TEST>) THEN NAME < C, C > ;
	IF DOC THEN NAME'DOCTOR CONS NAME;
	RETURN NAME;
	END;

EXPR GET_DATE(A,N);	% FORMS THE OUTPUT SENTENCE FOR YR,MONTH,DAY,DATE %

	BEGIN NEW B; BDATE(N); IF B THEN RETURN '(I DON?'T PLAY GAMES);
	IF A='YEAR OR A='MONTH THEN
	  RETURN ( '(THE YEAR IS) @ <B CAT ";"> @ '(THE MONTH IS) @ <B> ) ;
	IF A='DATE THEN 
		RETURN ('(TODAY IS) @ <B> @ < B CAT ","> @ '(I THINK) ) ;
	IF A='DAY THEN RETURN ( '(IT?'S) @ <B> ) ;
	END;

EXPR GET_DATE_ARB2(N);	% DECIDES WHETHER YEAR,MONTH,DAY,DATE, OR TIME REQUESTED %

	BEGIN NEW A;
	AASSOC('DAY, INPUTQUES);
	IF A THEN AASSOC('DATE, INPUTQUES);
	IF A  MEMQ(A, '(YEAR MONTH DAY DATE )) THEN RETURN GET_DATE(A,N);
	IF A THEN AASSOC('WHEN, INPUTQUES);
	IF A  ( (A = 'TIME) OR (A='WHEN) ) THEN RETURN GET_TIME();
	END;

EXPR GET_DATE_ARB();  GET_DATE_ARB2(0);		% DATE,TIME FOR TODAY %
EXPR GET_DATE_YES();  GET_DATE_ARB2(-1);	% DATE,TIME FOR YESTERDAY %
EXPR GET_DATE_TOM();  GET_DATE_ARB2(1);		% DATE,TIME FOR TOMORROW %

EXPR PTYJOB();  GREATERP(  LSH(LSH( TTYUU() ,6) , -35) , 0); % RETURNS T IF A PTYJOB %

EXPR DDJOB();  GREATERP(  LSH(LSH( TTYUU() ,4) , -35) , 0); % RETURNS T IF A DD JOB %

EXPR GET_TIME();	% LOOKS UP SYSTEM TIME AND GETS THE APPROX HOUR %

	BEGIN NEW A, HOUR, MIN, AHOUR;
	ATIMEUUH(); HOURA; MINA;
	AHOURHOUR + DIVIDE(MIN,30);
	IF AHOUR13 THEN AHOURAHOUR-12; IF AHOUR=0 THEN AHOUR12;
	TEN();  RETURN ( '(IT?'S ABOUT) @ <AHOUR CAT " O" > @ '(CLOCK) ) ;
	END;

EXPR TIMEUUH();
	BEGIN NEW A;
	ADIVIDE(TIMEUU(), 3600); ADIVIDE(A,60);
	RETURN <A,A>;  % THIS RETURNS (HOUR MINUTE) %
	END;

EXPR SPECCONCEPT(L);
	% USED FOR GENERAL IYOUME INPUT WHICH THE PATTERN MATCHER DIDNT RECOGNIZE %

	BEGIN NEW CON,YOU,NEG,FOUND,ADJ,INP;  INPINPUTQUES;
	FOR NEW WORD IN INP DO
	  IF GET(WORD,'SET) MEMBER SENSITIVELIST THEN CONWORD
	UNTIL CON;
	IF CON THEN RETURN NIL;
	IF ASSOC( 'YOU, INP) THEN YOUT;
	NEG NOT_FLAG;
	IF ASSOC('GOOD,INP) THEN ADJ'GOOD ELSE
	  IF ASSOC('BAD,INP) OR ASSOC('ODD,INP) THEN ADJ'BAD;
	IF YOU AND ADJ THEN
	  FOUND IF ((ADJ='GOOD)NEG) OR (NEG(ADJ='BAD)) THEN 
		CHOOSE 'POSADJ ELSE CHOOSE 'NEGADJ
	ELSE
	  IF YOU AND (GET(CON,'SPECIAL) OR ADJ) THEN FOUNDCHOOSE 'SPECCONCEPT
	ELSE  FOUNDCHOOSE 'SENSITIVELIST;
	RETURN FOUND;
	END;

% LASTWORD CHANGES L INTO THE APPROPRIATE ENGLISH WORD TO ADD TO THE END OF THE OUTPUT %

EXPR LASTWORD(L);	

	BEGIN NEW A,W;	WL;
	IF W='SENSITIVELIST THEN	WT ALSO
	  FOR NEW I IN GET('SENSITIVELIST, 'WORDS) DO
		IF AASSOC(I, INPUTQUES) THEN AGET(A,'SET  ) UNTIL A;
	IF W='COMPLEMENT THEN	WT ALSO
		IF AASSOC('GOOD, INPUTQUES) THEN AA;
	IF W='SPEC_CONCEPT THEN	WT ALSO	(
	  IF AASSOC('LOOKS, INPUTQUES) THEN AGET(A,'WORDS) 	ELSE A'LOOKS ) ;

	A IF A THEN <A>
		ELSE IF W=T OR W THEN  '(PROBLEMS) 
		ELSE IF ATOM W THEN <W> ELSE W;
	RETURN A;
	END;

END.  _EOF_ 
