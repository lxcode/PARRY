BEGIN 

%	THIS FILE CONTAINS THE ROUTINES FROM OLD PARRY WHICH DEALT WITH
		FLARE AND DELUSION TOPICS AND SETTING VARIABLES FROM THEM  %


%		#####   PARANOID MODEL   #####		%


NEW     POINTERS, DELFLAG, FLARE, FLARELIST, WDFLAG,
	TOPIC, DELNLIST, DELVLIST, DELALIST, LIVEFLARES, DEADFLARES, DELEND,

	SENSITIVELIST, WEIGHT, WEAK, SUPPRESS, CHOSEN,
	ANGER, FEAR, MISTRUST, HURT, ANGER0, FEAR0, MISTRUST0, HURT0, AJUMP, FJUMP, HJUMP,
	TRACEV, X, EOF, ENDE, SAVE_FILE, FILE1, FILE2;

SPECIAL POINTERS, DELFLAG, FLARE, FLARELIST, WDFLAG,
	TOPIC, DELNLIST, DELVLIST, DELALIST, LIVEFLARES, DEADFLARES, DELEND,

	SENSITIVELIST, WEIGHT, WEAK, SUPPRESS, CHOSEN,
	ANGER, FEAR, MISTRUST, HURT, ANGER0, FEAR0, MISTRUST0, HURT0, AJUMP, FJUMP, HJUMP,
	TRACEV, X, EOF, ENDE, SAVE_FILE, FILE1, FILE2;

SPECIAL TEN, EIGHT, IBASE, BASE;

DEFINE CAR PREFIX , CDR PREFIX , PROG2  3 3, SET0   5 5, CONS  86 83,
	THEN , ELSE \, STOREBYTE  5 5, CARN PREFIX, CHOOSE PREFIX;

EXPR TEN();  BASEIBASETEN;
EXPR EIGHT();  BASEIBASEEIGHT;

%THE FOLLOWING FUNCTION IS TO FIX OCTAL-DECIMAL PROBLEM %
FEXPR LAPIN (L);
	BEGIN NEW IBASE;
	IBASE8;
	RETURN EVAL ('DSKIN CONS L);
	END;

	%
OPARINITIALIZE	READS IN RDATA, SETS ALL VARIABLES IN THIS FILE  
		MUST BE DONE WHEN MAKING A NEW CORE IMAGE OF PARRY  %

EXPR  OPARINITIALIZE ();
	 BEGIN
	  
		EVAL '(INC (INPUT (PAR BLF) RDATA) NIL);
		WHILE NOT ATOM X  ERRSET(READ(),T) DO EVAL CAR X;
		INC(NIL,T);

	  FLARE'INIT;				%   FLARE=CURRENT FLARE TOPIC;
							  'INIT = NONE   %
	  LIVEFLARESGET ('FLARELIST, 'SETS);	 %   FLARES NOT YET DISCUSSED   %
	    DEADFLARESNIL;
	  SENSITIVELISTGET ('SENSITIVELIST, 'SETS);  %   SENSITIVE TOPICS   %
	  DELNLISTGET ('DELWDS, 'NOUNS);	% DELUSION TOPICS   %
	  DELVLISTGET ('DELWDS, 'VERBS);
	  DELALISTGET ('DELWDS, 'AMBIG);	% DELUSION TOPICS ABOVE A CERTAIN THRESHOLD OF MISTRUST   %
	  
	ANGERANGER0FEARFEAR0MISTRUSTMISTRUST0HURTHURT00;
	FJUMPAJUMPHJUMPNIL;

	END;

	%
CHECKFLARE     SCANS THE INPUT SENTENCE FOR THE FLARE WORD WHICH HAS THE
		HIGHEST WEIGHT   %
		% CALLED BY FLAREREF, ASCAN  %

	EXPR  CHECKFLARE (INP, FLARELIST, FLAG);
	 BEGIN
	  NEW NFLARE, WORD, FSET, WT, RESULT, W;

		%   DISTINGUISH FLARES FOUND WITHIN THE STATEMENT (NFLARE)
		 FROM MOST RECENT FLARE (FLARE)   %

	  NFLARE'INIT;	    %   GET ('INIT, 'WT) = 0   %

		%   SCAN INPUT FOR FLARES AND CHECK WHETHER WEIGHT IS
		    GREATER THAN ANY PRECEDING FLARES IN INPUT   %

	% ***** SOMEDAY, USE DIFFERENT INP AND DIFFERENT "GET(WORD,'SET)" %
	%   FOR EXAMPLE, USE THE PATTERN OR THE WORDS THAT MATCHED THE PATTERN  %

	  FOR WORD IN INP DO
	      IF (FSETGET (CAR WORD, 'SET)) MEMBER (FLARELIST) 
			AND GET(CDR WORD, 'USED)  THEN
		IF (WTGET (FSET, 'WT)) GREATERP GET (GET (NFLARE, 'SET), 'WT) THEN
		   PROG2 (NFLARECAR WORD, RESULTT, WCDR WORD);
	  IF RESULT THEN

		   %   IF FLARE ALREADY BEING DISCUSSED, DISREGARD ANY 
			VERY WEAK NEW FLARE   %

	     IF NOT (FLARE = 'INIT) AND NOT ((WTGET (GET (NFLARE, 'SET), 'WT)) GREATERP 1) THEN
		RESULTNIL
	     ELSE
	     BEGIN
		FLARENFLARE;
		WEIGHTWT;	 %   USED IN COMPUTING RISE IN FEAR   %
		  IF W AND FLAG THEN PUTPROP(W, T, 'USED);
	     END;

	  RETURN (RESULT);
	 END;

	%
DELREF      SCANS THE INPUT SENTENCE FOR THE FIRST DIRECT REFERENCE TO 'SELF'S
	  DELUSIONAL COMPLEX AND RETURNS A FEARFUL REACTION.  IF NO SUCH REFERENCE
	  IS FOUND, NIL IS RETURNED.   %
		%  TOP LEVEL  %

	EXPR  DELREF (FOUND);
	 BEGIN
	  NEW RESULT;

	  IF % FOUND AND %   (FOUND = 'MAFIAEND) THEN
	  BEGIN
	     IF DELFLAG THEN 

			 %   IF DELUSIONS ALREADY BEING DISCUSSED, THEN
			  DISTINGUISH BETWEEN "STRONG" AND "AMBIGUOUS" DELUSIONAL TOPICS
			  IN COMPUTING RISE IN FEAR   %

		IF FOUND AND GET (CAR (FOUND), 'STRONG) THEN FJUMP0.4
		ELSE FJUMP0.1
	     ELSE
	     BEGIN
		FJUMP0.5;
 
			 %   'MAFIA' TOPIC NO LONGEV INDUCES FEARFUL REACTION,
			  SINCE DELUSION DISCUSSION HAS ALREADY BEEN EVOKED   %

		PUTPROP('MAFIA, T, 'USED);

			 %   MODIFY FLARE STRUCTURES TO NOTE THAT 'MAFIA' TOPIC
			  HAS ALREADY BEEN BROUGHT UP   %

		FLMOD ('MAFIASET);
	     END;

		   %   SET (OR KEEP) DELFLAG = T UNLESS 'SELF HAS
			  FINISHED DISCUSSION DELUSIONS   %

	     IF NOT DELEND THEN DELFLAGT;
	     
		%   RESET SO THAT FLARES OF LOWER PRIORITY THAN THOSE WHICH 
		 MAY HAVE BEEN PREVIOUSLY MENTIONED ARE RECOGNIZED   %

	     FLARE'INIT;

		   %   FORGET ABOUT RECENTLY DISCUSSED SELF-TOPICS   %

		TOPIC'DELUSIONS;
		RESULTNIL;
	  END
	  ELSE
	  IF  (FOUND = 'MAFIAEND  % I.E. AS ALREADY USED DEL WD AND IN INPUT  %
	     ) AND DELEND  THEN RESULT  CHOOSE 'MAFIASET;

	  RETURN RESULT;
	 END;

	%
DELSTMT	CAUSES THE "NEXT" DELUSION TO BE EXPRESSED   %
		% CALLED BY DELREF, MISCQ, MISCS, FLSTMT  %

	EXPR DELSTMT ();
	 BEGIN
	  NEW STMT;   SPECIAL STMT;

		%   IN WEAK VEVSION, TALK ABOUT RACKETS RATHER THAN MAFIA   %

	  IF WEAK THEN RETURN FLSTMT ('RACKETSET);

	  %   IF 'SELF HAS ALREADY EXPRESSED ALL HIS DELUSIONS, HE REFERS TO 
		PREVIOUSLY MENTIONED ONES UP TO 2 TIMES TOTAL   %

	    IF NOT GET('DELNSET, 'STORY) THEN  DELFLAGNIL ALSO CHOOSE 'MAFIASET;
	  DELFLAGT;
	  FLARE'INIT;
	    TOPIC'DELUSIONS;

		%   SELECT DELUSION   %

	  STMTCHOOSEDEL (NIL);

	  %   IF STMT CONTAINS DELUSIONAL FLARE, DELETE AS SUCH   %

	% ***** MAKE SURE DELCHECK IS DONE ON THE OUTPUT SENTENCE  %

	  %   REMEMBER THE DELUSIONAL STATEMENT TO WHICH 'OTHER IS ABOUT TO RESPOND   %

	  RETURN (STMT);
	 END;

	%
FLAREREF    HANDLES FLARE REFERENCES   %
		% TOP LEVEL  %

	EXPR FLAREREF (INP);
	 BEGIN
		%   CHECK FOR NEW FLARE AND RECORD AS "OLD"   %

	  IF CHECKFLARE (INP, LIVEFLARES, NIL) THEN FLRECORD (GET (FLARE, 'SET));

		%   CHECK FOR OLD FLARE   %

	  IF CHECKFLARE (INP, DEADFLARES, T) THEN	%   RESPOND TO FLARE   %
		RETURN (GET (FLARE,'SET));
	 END;

	%
ASCAN	  SCANS 'SELF'S ANSWER FOR MENTION OF FLARE OR MAFIA   %
	% CALLED BY PROMPT, ANSWER--NOW DONE BY NEW PARRY AT END OF OUTPUT%

	EXPR ASCAN (ANS, Q);
	BEGIN
	IF CHECKFLARE (ANS, LIVEFLARES, T) THEN PUTPROP( GET(FLARE,'SET),T,'USED);

	IF 'MAFIA MEMBER ANS THEN  DELFLAGT 
		ALSO FLARE'INIT ALSO TOPIC'DELUSIONS;

	IF DELFLAG THEN DELCHECK(ANS);
	END;

	%
CHOOSE	 SELECTS THE NEXT REPLY FROM THE RELEVANT GROUP  
	  INPUT SHOULD BE THE NAME OF A GROUP OF REPLIES
	  OUTPUT WILL BE A LAMBDA NUMBER  %

	EXPR  CHOOSE(REPLIES);
	BEGIN
	NEW  RESPONSE;
	IF REPLIES THEN RETURN NIL;  CHOSENREPLIES;
	  IF NULL RESPONSEGET (REPLIES, 'IND) THEN
	     RETURN
		IF REPLIES EQ 'EXHAUST THEN ENDET ALSO CHOOSE 'BYEFEDUP 
			ELSE  CHOOSE 'EXHAUST;
	  RETURN RESPONSE;
	 END;

	%
CHOOSEDEL   CHOOSES A DELUSIONAL RESPONSE ACCORDING TO "TYPE", WHICH INDICATES
	  WHETHER THE NEXT GENERAL DELUSION IS TO BE SELECTED (TYPE=NUMBER)
	  OR A CERTAIN TYPE OF QUESTION IS TO BE ANSWERED   %
		% CALLED BY DELSTMT, SPECQUES  %

	EXPR CHOOSEDEL (TYPE);
	 BEGIN
	  NEW SEMANT;
		IF SEMANTGET ('DELNSET, 'STORY) THEN RETURN NIL;
		RETURN CAR SEMANT;
	 END;

	%
DELCHECK    RETURNS ANY NEW DELUSION-EXPRESSIONS FOUND IN INPUT AND DELETES AS SUCH   %
		% CALLED BY DELREF, SPECQUES, DELSTMT  %
	% INP IS INPUTQUES   %

	EXPR DELCHECK (INP);
	 BEGIN
	  NEW WORDS;
 
		%   CHECK FOR STRONG DELUSION-NOUNS AND -VERBS
		    (AT PRESENT THE NOUN-VERB DISTINCTION IS NOT UTILIZED   %

	  IF ( WORDSMEMBER3 (DELNLIST, INP) )  OR
	     ( WORDSMEMBER3 (DELVLIST, INP) )  THEN NIL ELSE

		%   CHECK FOR AMBIGUOUS DELUSION WORDS AT HIGH MISTRUST LEVEL  %

	   IF MISTRUST GREATERP 10 AND ( WORDSMEMBER3 (DELALIST, INP) ) THEN
	      NIL ;
	    IF WORDS  CDR WORDS THEN PUTPROP(CDR WORDS, T, 'USED);
	  IF WORDS AND ATOM WORDS THEN WORDS WORDS CONS NIL;
	    IF ('MAFIA MEMBER3 INP % AS ALREADY-USED DELN WD% ) AND WORDS
			THEN WORDS 'MAFIAEND;
	    RETURN WORDS;
	 END;

	%
DELETE	 DELETES WORD WD FROM LIST L   %

	EXPR DELETE (WD, L);
	 IF NULL L THEN NIL
	 ELSE
	 IF WD EQUAL CAR (L) THEN CDR (L)
	 ELSE CAR (L) CONS DELETE (WD, CDR (L));

	%
DELETEP	    DELETES WD FROM THE PROP PROPERTY LIST OF L	  %

	EXPR DELETEP (L, WD, PROP);
	PUTPROP (L, DELETE (WD, GET (L, PROP)), PROP);


	%
FIXPTRS     TRANSFERS HIERARCHICAL POINTERS TO NEW FLARE
	  TO NEXT HIGHER FLARE IN PATH   %
		% CALLED BY FLMOD  %

	EXPR FIXPTRS (FLSET);
	BEGIN  NEW CONCEPT;
	FOR CONCEPT IN LIVEFLARES @ DEADFLARES DO
		IF GET (CONCEPT, 'NEXT) EQ FLSET THEN
		  PUTPROP (CONCEPT, GET (FLSET, 'NEXT), 'NEXT);
	 END;

	%
FLRECORD    NOTES MENTION OF FLARE AND RAISES FEAR   %
		% CALLED BY FLAREREF  %

	EXPR FLRECORD (FLSET);
	 BEGIN
	  FLMOD (FLSET);
	  FJUMPWEIGHT/40.0;

		%   REINITIALIZE SELF-TOPIC INDICATORS   %

	    TOPICFLSET;
	 END;

	%
FLMOD       MOVES NEW FLARE FROM "LIVELIST" TO "DEADLIST" AND
	  ADJUSTS FLARE POINTER HIERARCHY   %
		% CALLED BY DELREF, FLRECORD, ASCAN, LEADON  %

	EXPR FLMOD (FLSET);
	 BEGIN
	  LIVEFLARESDELETE (FLSET, LIVEFLARES);
	  DEADFLARES(FLSET CONS DEADFLARES);
	  FIXPTRS (FLSET);
	 END;

	%
FLARELEAD DECIDES WHAT TYPE OF "SUSPICIOUSNESS" REPLY IS SUITED
	   TO INTRODUCE THE FLARE CONCEPT   %
		% CALLED BY LEADON  %

EXPR  FLARELEAD (FLSET);

	BEGIN	PUTPROP(FLSET,T,'USED);
	IF GET (FLSET, 'TYPE) EQ 'INSTITUTION THEN
	  WDFLAG  ( '(THE) @  <CAR (GET (FLSET, 'WORDS))>  )
	 ELSE
			 %   DO NOT TREAT SINGULARS AS A GENERIC TOPIC   %

	  WDFLAG  (IF CAR (LAST (EXPLODE (FLARE))) EQ 'S THEN <FLARE>
			ELSE <CAR (GET (FLSET, 'WORDS))>   ) ;
	ADDANAPH( < 'THEY CONS (IF CDR WDFLAG THEN CADR WDFLAG ELSE CAR WDFLAG) > ) ;
	ADDANAPH( < 'GO_ON CONS CARN(GET( FLSET, 'STORY)) > );
	RETURN (CHOOSE 'NEXTFL);
	END;

	%
FLSTMT	 PROVIDES NEXT STATEMENT ABOUT FLARE   %
		% CALLED BY MISCQ, MISCS, ANSVAR, DELSTMT  %

	EXPR FLSTMT (FSET);
	    BEGIN  NEW STMT;

		%   IF REACH 'MAFIASET THRU FLARE HIERARCHY, ENTER DELUSIONAL MODE   %

	  IF (FSET EQ 'MAFIASET) AND NOT DELEND THEN
		DELFLAGT  ALSO RETURN DELSTMT ();

	    IF STMT GET ( FSET, 'STORY) THEN  RETURN CAR STMT;

		 %   GO TO NEXT FLARE TOPIC   %
	  RETURN LEADON (FSET);
	 END   ;
	
	%
LEADON	 %
		% CALLED BY FLSTMT  %

	EXPR LEADON (OLDSET);
	BEGIN  NEW NEWSET;  NEWSET  GET(OLDSET, 'NEXT);
	  IF NEWSET NEQ 'MAFIASET THEN

		%   RECORD NEW FLARE   %

	  BEGIN
		FLMOD (OLDSET);	% MARK OLD ONE AS BEING USED UP %
	     FLARECAR (GET (NEWSET, 'WORDS));
	  END
	  ELSE
	  IF DELEND THEN

		   %   ARRIVE AT 'MAFIASET BUT THROUGH WITH DELUSIONS   %

	     RETURN (PROG2 (FLARE'INIT, CHOOSE 'FEELER))
	  ELSE
	  IF WEAK OR (FEAR GREATERP 17) OR (ANGER GREATERP 17) OR
	     ((FEAR + ANGER + MISTRUST) GREATERP 40) THEN

		   %   ARRIVED AT 'MAFIASET BUT DOES NOT HAVE DELUSIONS ABOUT
			  MAFIA OR IS UNWILLING TO DISCUSS THEM   %

	     RETURN (CHOOSE 'CHANGESUBJ)
	  ELSE
	  BEGIN
	     DELETE ('MAFIA, DELNLIST);
	     DELFLAGT;
	     FLARE'INIT;
		TOPIC'DELUSIONS;
	  END;

		%   RESPOND WITH NEW FLARE, IF USED THEN NO LEADING STMT   %
		 %  MARK AS USED SO WE DON'T DO FLARELEAD TWICE ON IT  %

	IF GET(NEWSET, 'USED) THEN RETURN FLSTMT(NEWSET) 
	   ELSE  RETURN (FLARELEAD (NEWSET)); 
	 END;

	%
MEMBER1	CHECKS WHETHER ATOMS OR GROUPS OF WORDS IN WLIST ARE PRESENT IN INPUT   %
% ******* NOT USED
	EXPR MEMBER1 (WLIST, SPECIAL INP8);
	 BEGIN
	  NEW FOUND, GROUP;
	  FOR GROUP IN WLIST DO
	     FOUNDIF ATOM (GROUP) THEN GROUP MEMBER INP8
		   ELSE
		EVAL ('AND CONS MAPCAR (FUNCTION (LAMBDA (X); X MEMBER INP8), GROUP))
	     UNTIL FOUND;
	  IF FOUND THEN RETURN GROUP;
	 END;

**** %
	%
MEMBER3		CHECKS IF ATOMS ARE IN INPUT -- INPUT IS A LIST OF DOTTED PAIRS  %

EXPR MEMBER3(WLIST, L);
	BEGIN  NEW WORD, PAIR;
	IF ATOM WLIST THEN WLIST  <WLIST> ;
	FOR WORD IN WLIST DO	BEGIN
		PAIR  WORD ASSOC L;
		IF PAIR AND GET(CDR PAIR, 'USED) THEN PAIRNIL;
		END
	  UNTIL PAIR ;
	RETURN PAIR;
	END;

	%
MISCQ       TRIES TO DETECT AND ANSWER CERTAIN RECOGNIZABLE QUESTIONS.
	  IF IT FAILS, IT TRIES TO DISCERN WHETHER THE QUESTION CONTAINS
	  INTERROGATIVE WORDS REQUIRING A SPECIFIC ANSWER, OR WHETHER IT
	  REQUIRES A GENERAL YES- OR NO-TYPE ANSWER, 
	  AND CALLS FOR AN APPROPRIATE REPLY   %
		% CALLED BY ANSWER  %

	EXPR MISCQ (Q);
	 BEGIN
	  NEW QWORD, ANS, CONCEPT;

		%   CHECK FOR QUESTION ABOUT EXTERNAL WORLD   %

	     IF 'HOW MEMBER Q THEN

			 %   UNIDENTIFIABLE "HOW-TYPE" QUESTION   %

		FOR CONCEPT IN '(MANY MUCH LONG OFTEN) DO
		   IF CONCEPT MEMBER Q THEN ANSCHOOSE CONCEPT
		UNTIL ANS;
	  IF ANS THEN RETURN (ANS)
	  ELSE

		%   IF QUESTION NOT RECOGNIZED, TRY TO ANSWER ACCORDING TO CONTEXT   %

	  IF ANS  SPECCONCEPT(Q) THEN RETURN (ANS) 
	  ELSE
	IF (FLARE NEQ 'INIT)  LULL()  ANSFLSTMT (GET (FLARE,'SET)) THEN RETURN(ANS)
	ELSE
	IF DELFLAG  LULL()   ANSDELSTMT() THEN RETURN(ANS) 
	ELSE

		%   WH- QUESTIONS   %

	  IF 'WHY MEMBER Q THEN ANSCHOOSE 'WHY
	  ELSE
	  FOR QWORD IN GET ('QLIST, 'IND) DO
	  (ANS   IF QWORD MEMBER Q THEN CHOOSE 'UNKNOWN)
	     UNTIL ANS;
	  IF ANS THEN RETURN (ANS)
	  ELSE

		%   MISCELLANEOUS "TELL-" QUESTION   %

	  IF ('TELL MEMBER Q)  THEN RETURN CHOOSE 'KNOWNOTHING
	  ELSE

		%   NO CLUES - ANSWER NONCOMMITTALLY   %

	  RETURN (CHOOSE 'QREPLIES);
	 END;

	%
MISCS	TRIES TO DETECT AND ANSWER CERTAIN RECOGNIZABLE STATEMENTS,
	   MAINLY IMPERATIVES AND EXPECTED EXPRESSIONS   %
		% CALLED BY ANSWER  %

	EXPR MISCS (S);
	BEGIN NEW ANS,FOUND;  FOUND 
	 IF ('JUMP MEMBER S) THEN PROG2( ENDET, CHOOSE 'EXIT )
	 ELSE
	 IF (CAR (S) EQ 'HI) OR (CAR (S) EQ 'HELLO) OR 
	  CADR S MEMBER '(MORNING AFTERNOON EVENING) THEN CHOOSE 'HELLO
	 ELSE
	 IF (('ALREADY MEMBER S) OR ('BEFORE MEMBER S)) AND
	   (('SAID MEMBER S) OR ('MENTIONED MEMBER S)) THEN
		CHOOSE 'ALREADYSAID
	 ELSE

		%   LOOK AT CONTEXT OF CONVERSATION   %

	 IF ANS  SPECCONCEPT(S) THEN ANS
	 ELSE
	 IF (FLARE NEQ 'INIT)  LULL()   ANS FLSTMT (GET (FLARE, 'SET)) THEN  ANS
	 ELSE
	 IF DELFLAG  LULL()  ANS DELSTMT () THEN ANS

		%   NONCOMMITTAL REPLY  %

	 ELSE CHOOSE 'SREPLIES;
	RETURN(FOUND);  END;

	%
MODIFVAR    MODIFIES AFFECT VARIABLES AFTER EACH I-O PAIR   %
		%  TOP LEVEL  %

EXPR MODIFVAR ();
	 BEGIN
		%   ACCOUNT FOR NORMAL DROP IN EACH VARIABLE   %

	  ANGER MAX(ANGER-1,ANGER0);
	  HURT MAX(HURT-0.5, HURT0);
	  IF DELFLAG THEN   FEAR MAX(FEAR-0.1, FEAR0+5)
		   %   ADD 5 TO BASE VALUE OF FEAR IF DELUSIONS UNDER DISCUSSION   %
	  ELSE
	  IF FLARE NEQ 'INIT THEN FEAR MAX(FEAR-0.2, FEAR0+3)
		   %   ADD 3 TO BASE VALUE OF FEAR IF FLARES UNDER DISCUSSION   %

	  ELSE FEAR MAX(FEAR-0.3, FEAR0);
	  MISTRUST MAX(MISTRUST-0.05, MISTRUST0);
      IF TRACEV THEN  PRINTVARS();
	FJUMPNIL; AJUMPNIL; HJUMPNIL;
	 END;


	%
RAISE	RAISES LEVEL OF RELEVANT AFFECT VARIABLES;
	   REDUCE JUMP IF IN WEAK VERSION   %
		% CALLED BY MODIFVAR  %


EXPR MAX(L,M);  IF LM THEN L ELSE M;

END. _EOF_
